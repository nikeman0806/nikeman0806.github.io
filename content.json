{"meta":{"title":"서울숲중절모의 BLOG","subtitle":"웹 퍼블리셔 강현석의 블로그","description":"웹은 모든 사람들에게 평등하게 이용 할 수 있어야 한다고 생각합니다. <br/>그렇기 때문에 눈에 보이는 디자인 뿐만 아니라 웹 표준과, 웹 접근성 준수하며 웹을 만드는 것을 좋아합니다.","author":"Hyeon Seok","url":"https://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-04-04T01:33:40.000Z","updated":"2019-04-04T02:57:57.531Z","comments":true,"path":"categories/index.html","permalink":"https://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-04-04T01:36:22.000Z","updated":"2019-05-22T05:27:37.227Z","comments":true,"path":"about/index.html","permalink":"https://yoursite.com/about/index.html","excerpt":"","text":"웹은 모든 사람들에게 평등하게 이용 할 수 있어야 한다고 생각합니다. 그렇기 때문에 눈에 보이는 디자인 뿐만 아니라 웹 표준과, 웹 접근성 준수하며 웹을 만드는 것을 좋아합니다.I think the web should be equally available to everyone. That’s why I like to make webs that comply with web standards, web accessibility as well as visual design.포트폴리오를 보시려면 아래를 클릭해주세요 :)Please click below to view portfolioPortfolio"},{"title":"search","date":"2019-04-04T01:38:52.000Z","updated":"2019-04-04T03:48:18.598Z","comments":true,"path":"search/index.html","permalink":"https://yoursite.com/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-04T01:37:55.000Z","updated":"2019-04-04T02:58:23.937Z","comments":true,"path":"tags/index.html","permalink":"https://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS 가이드","slug":"190524_css가이드","date":"2019-05-24T07:00:07.019Z","updated":"2019-05-27T01:18:39.707Z","comments":true,"path":"2019/05/24/190524_css가이드/","link":"","permalink":"https://yoursite.com/2019/05/24/190524_css가이드/","excerpt":"","text":"CSS 가이드CSS 처음 배웠을 때는 그냥 생각나는 데로 막 적었던 것 같다.width, height 만 맨 앞에 위치시키고 뒤죽박죽이였습니다.어디선 position이 앞에 위치해 있고, 또 어디선 맨 뒤에 위치해 있었습니다.처음 포트폴리오를 만들때 나중에 수정하려고 보면 보기가 힘들었습니다.그래서 CSS 가이드라인이 필요하다고 생각하였습니다. daum, naver, mozila 등에서 가이드를 만들었고 저도 그것들을 많이 참고를 했고,제 나름대로의 속성 순서를 공유 해드릴려고 합니다. CSS 속성 순서속성정의 -&gt; 모양윤곽 -&gt; 윤곽 디테일 -&gt; 색상 순으로 작성을 한다. display. 블록, 인라인 속성을 정리해준다.(속성) box-border overflow (넘침) float (흐름) clear position (위치) left, top, right, bottom 순으로. width height line-heigt(line-height는 글자속성인데 height 값이랑 똑같이 쓸때가 많아서 height 바로 뒤로 사용) margin padding(원래는 padding을 먼저 썼는데, 초기값을 margin: 0; padding: 0;으로 일반적으로 사용해서 margin 먼저 사용.) border (border-radius, border-color 등) background-color (색상) font-size font-weight text-align color transform transition opacity 등등… z-index (맨뒤에) 폰트 속성 순서축약형은 지양 다음 순으로 작성한다. font-family font-size font-weight font-style background-position 속성값숫자로 선언한다. {background-position: left top} (x) {background-position: 0 0} (o) {background-position: 100% 50%} (o) 컬러값CSS 최적화를 위해 축양형으로 사용한다. {color: #777777} (x) {color: #777} (o) z-index값 적용 가이드 z-index 수치 간격은 10단위로 적용. 기본값을 10으로 지정, 해당 프로젝트마다 z-index를 재정의 해서 사용 페이지 단위에서 1000을 넘는 경우를 발생하지 않음 팝업은 1000부터 시작 마무리속성 순서에 대해서는 정답이 없다고 생각합니다.속성이 계속 계속 나오고 있고 사람마다 다 다르기 때문이죠.흰 고양이든 검은 고양이든 쥐만 잘 잡으면 생각합니다. 그리고 속성 순서 정의에 대해서 스트레스받을 필요도 없다고 생각합니다.전체적인 규칙에 공감한다면 눈에 쉽게 들어올 것입니다.","categories":[{"name":"css","slug":"css","permalink":"https://yoursite.com/categories/css/"}],"tags":[{"name":"html","slug":"html","permalink":"https://yoursite.com/tags/html/"},{"name":"css","slug":"css","permalink":"https://yoursite.com/tags/css/"}]},{"title":"flexbox, 그리고 레이아웃에 대해","slug":"190521_flex","date":"2019-05-21T06:20:50.578Z","updated":"2019-05-27T01:25:50.352Z","comments":true,"path":"2019/05/21/190521_flex/","link":"","permalink":"https://yoursite.com/2019/05/21/190521_flex/","excerpt":"","text":"html은 기본적으로 위에서 아래로 가로로 출력이 됩니다.그래서 예전부터 레이아웃을 잡기위한 노력들이 있었습니다. 여러가지 방법들이 있지만 저는 float를 제일 선호합니다.이유는 ‘크로스 브라우징’ 때문입니다.저의 모토는 모든 사람들이 이용 가능 한 웹을 만드는 것이기 때문입니다. 제가 flex에 대해서 글을 작성하는 이유는 회사에 처음 왔을때 기존 계신 프론트 개발자분과 논쟁이 있었습니다.저는 float를 사용해야한다는 입장이였고, 프론트앤드 개발자분은 float가 너무 어렵고 크로스 브라우징을 지금 단계에서는 낮게 까지 안맞춰도 되어서 flex를 사용하자는 주장이였습니다. 그때 flex에 대해서 공부를 하였고,지금은 프로젝트의 방향성에 따라서 둘 다 사용하고 있습니다. 그래서 그때 공부하고 정리한 내용을 공유하려고합니다. 레이아웃의 역사레이아웃의 역사는 ‘table tag’로 시작했다고 볼수 있습니다.과거 퍼블리셔라는 직군이 없거나 애매모호 할 시절에는 디자이너 or 웹 개발자들이 화면단을 만들었습니다.드림위버, 나모 웹 에디터로 화면을 직접 보면서 제작할 수 있어서 HTML, CSS를 모르더라도 만들 수 있었고, 이런 에디터들은 레이아웃을 table tag로 잡아 주었습니다.더 쉽게는 디자인이 된 것을 이미지로 잘라서 table에 넣기만 하면 완성이 되었습니다.하지만 웹 표준을 위배하고 웹 접근성에 치명적인 약점이 있어 float의 시대로 그리고 flex, gird이 개발되고 사용되게 됩니다. table tag position float flex grid 1. table tag 장점 태그의 의미에 따라 사용(표, form)하면 좋음 단점 table 코드로 레이아웃을 만들고 안에 이미지, 내용을 넣어서 웹을 만듬. table 요소를 도표의 의미가 아닌 용도에 쓰는 것. 그리고 table 레이아웃으로 인해 HTML 문서안에 외형을 담고 있는 것은 웹 표준 위배. table 요소는 기본적으로 접근성이 떨어짐. 또한 내용이 비 순차적으로 담기면서 접근성이 떨어질 뿐 아니라, 의미적 구조도 깨짐. 소스가 불필요하게 길어질 수 있고, 추후 소스 수정 등의 유지보수에 어려움. 테이블의 레이아웃은 브라우저마다 미묘하게 다를 수 있기 때문에, 크로스 브라우징이 어려움. 여러 해상도를 지원하는 반응형 웹, 가변적 레이아웃을 적용하기는 사실 상 불가능. table 태그는 하나의 객체. table 태그 내에 있는 모든 셀이 로드 되어야 화면에 나타남. 그래서 페이지 속도가 느림. 2. position 장점 기준(position:relative)으로 부터 자신의 원하는 위치에 정확하게 위치시킬 수 있음. 사용하기 쉬움. 단점 반응형 웹을 사용할 때에는 날아다 닐 수 있음. 3. float 장점 확실하게 레이아웃을 컨트롤 할 수 있는 방법. 가로로 출력되는 html을 세로로 정렬 용이. 크로스 브라우징에 용이 단점 어려움. width 값이 딱 떨어지지 않으면 계산하기 힘듬. (해결 방법은 있지만 다음 기회에) padding, margin, border 값 요소의 넓이, 높이값에 영향을 미치는 값이 있으면 더 계산힘듬. 서로 다른 높이값을 갖는 요소가 있으면 세로정렬에 어려움. 4.flex 장점 ‘유연’ 공간에 따라서 가로 또는 세로의 길이를 조절 할 수 있으며 공간에 대한 비율기반으로 크기를 알아서 조절해준다. margin, padding, border 값 요소의 넓이, 높이값에 영향을 미쳐도 알아서 값을 계산해서 조절해줌. 마크업 된 순서와 상관없이 원하는 방향, 순서에 따라 flex 항목들을 나타나게 할 수 있어 접급성에 제약을 받지 않는다. 서로 다른 높이값을 갖는 요소가 있어도 세로정렬이 용이. 단점 ie11 이상 부터 사용가능. 버전이 다른 브라우저에서 사용하려면 벤더프릭피스를 사용해야한다. 5.grid 장점 레이아웃 정리하기 쉬움. 단점 flex 보다 더 최근에 나옴. 호환되는 브라우저 버전이 높음. 미국에선 사용가능. 마무리저도 float만 고집해왔는데 위에 말했듯이 논쟁이 뒤 flex를 공부하고 사용해봤는데 정말 좋습니다.진짜 정말 좋습니다.크로스 브라우징이 상관없는 프로젝트에서는 무조건 flex를 사용하고 있습니다. 레이아웃을 구성할 수 있는 코드는 위에 적어놨듯이 많습니다.프로젝트에 맞게 주변 상황에 맞게 사용하면 된다고 생각합니다. 자신이 할 줄 아는 것에만 고집하지 말고 유연한(flexible) 사고와 자세를 가진 사람이 되는게 더 중요한 것 같습니다.","categories":[{"name":"css","slug":"css","permalink":"https://yoursite.com/categories/css/"}],"tags":[{"name":"html","slug":"html","permalink":"https://yoursite.com/tags/html/"},{"name":"css","slug":"css","permalink":"https://yoursite.com/tags/css/"},{"name":"flex","slug":"flex","permalink":"https://yoursite.com/tags/flex/"}]}]}